"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5986],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>y});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},s=Object.keys(e);for(r=0;r<s.length;r++)a=s[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)a=s[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var i=r.createContext({}),c=function(e){var t=r.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=c(e.components);return r.createElement(i.Provider,{value:t},e.children)},g="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,s=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),g=c(a),u=n,y=g["".concat(i,".").concat(u)]||g[u]||m[u]||s;return a?r.createElement(y,o(o({ref:t},p),{},{components:a})):r.createElement(y,o({ref:t},p))}));function y(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var s=a.length,o=new Array(s);o[0]=u;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[g]="string"==typeof e?e:n,o[1]=l;for(var c=2;c<s;c++)o[c]=a[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},762:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var r=a(7462),n=(a(7294),a(3905));const s={sidebar_label:"message_types_catalog",title:"core.messaging.message_types_catalog"},o=void 0,l={unversionedId:"reference/core/messaging/message_types_catalog",id:"reference/core/messaging/message_types_catalog",title:"core.messaging.message_types_catalog",description:"MessageTypesCatalog Objects",source:"@site/docs/reference/core/messaging/message_types_catalog.md",sourceDirName:"reference/core/messaging",slug:"/reference/core/messaging/message_types_catalog",permalink:"/rnawrozi.github.io/docs/reference/core/messaging/message_types_catalog",draft:!1,tags:[],version:"current",frontMatter:{sidebar_label:"message_types_catalog",title:"core.messaging.message_types_catalog"},sidebar:"referenceSidebar",previous:{title:"message_router",permalink:"/rnawrozi.github.io/docs/reference/core/messaging/message_router"},next:{title:"command_meta_information",permalink:"/rnawrozi.github.io/docs/reference/core/messaging/meta/command_meta_information"}},i={},c=[{value:"MessageTypesCatalog Objects",id:"messagetypescatalog-objects",level:2},{value:"register_type",id:"register_type",level:4},{value:"find_type",id:"find_type",level:4}],p={toc:c},g="wrapper";function m(e){let{components:t,...a}=e;return(0,n.kt)(g,(0,r.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"messagetypescatalog-objects"},"MessageTypesCatalog Objects"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"class MessageTypesCatalog()\n")),(0,n.kt)("p",null,"Global catalog of all registered message types."),(0,n.kt)("p",null,"This is a globally accessible list of all message types, associated with their respective message names.\nIt","'","s mainly used to create proper message objects from incoming network messages."),(0,n.kt)("h4",{id:"register_type"},"register","_","type"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"@staticmethod\ndef register_type(name: MessageName, msg_type: type[MessageType]) -> None\n")),(0,n.kt)("p",null,"Registers a new message type."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"name")," - The message name."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"msg_type")," - The message type.")),(0,n.kt)("h4",{id:"find_type"},"find","_","type"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"@staticmethod\ndef find_type(name: MessageName) -> type[MessageType] | None\n")),(0,n.kt)("p",null,"Finds the message type associated with the given ",(0,n.kt)("inlineCode",{parentName:"p"},"name"),"."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"name")," - The message name.")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns"),":"),(0,n.kt)("p",null,"  The associated message type, if any."))}m.isMDXComponent=!0}}]);