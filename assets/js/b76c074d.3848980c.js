"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[386],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>d});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var i=n.createContext({}),c=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(i.Provider,{value:t},e.children)},m="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=c(r),p=a,d=m["".concat(i,".").concat(p)]||m[p]||g[p]||o;return r?n.createElement(d,s(s({ref:t},u),{},{components:r})):n.createElement(d,s({ref:t},u))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,s=new Array(o);s[0]=p;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[m]="string"==typeof e?e:a,s[1]=l;for(var c=2;c<o;c++)s[c]=r[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},8782:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>g,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var n=r(7462),a=(r(7294),r(3905));const o={sidebar_label:"message_router",title:"core.messaging.message_router"},s=void 0,l={unversionedId:"reference/core/messaging/message_router",id:"reference/core/messaging/message_router",title:"core.messaging.message_router",description:"MessageRouter Objects",source:"@site/docs/reference/core/messaging/message_router.md",sourceDirName:"reference/core/messaging",slug:"/reference/core/messaging/message_router",permalink:"/rnawrozi.github.io/docs/reference/core/messaging/message_router",draft:!1,tags:[],version:"current",frontMatter:{sidebar_label:"message_router",title:"core.messaging.message_router"},sidebar:"referenceSidebar",previous:{title:"message_bus_protocol",permalink:"/rnawrozi.github.io/docs/reference/core/messaging/message_bus_protocol"},next:{title:"message_types_catalog",permalink:"/rnawrozi.github.io/docs/reference/core/messaging/message_types_catalog"}},i={},c=[{value:"MessageRouter Objects",id:"messagerouter-objects",level:2},{value:"RoutingError Objects",id:"routingerror-objects",level:2},{value:"__init__",id:"__init__",level:4},{value:"verify_message",id:"verify_message",level:4},{value:"check_local_routing",id:"check_local_routing",level:4},{value:"check_remote_routing",id:"check_remote_routing",level:4}],u={toc:c},m="wrapper";function g(e){let{components:t,...r}=e;return(0,a.kt)(m,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"messagerouter-objects"},"MessageRouter Objects"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class MessageRouter()\n")),(0,a.kt)("p",null,"Message routing rules and logic."),(0,a.kt)("p",null,"When a message enters the message bus, it is first checked for its validity.\nAfterwards, the router decides through which channels (local, remote) it needs to be sent."),(0,a.kt)("h2",{id:"routingerror-objects"},"RoutingError Objects"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class RoutingError(RuntimeError)\n")),(0,a.kt)("p",null,"Represents errors during routing validation."),(0,a.kt)("h4",{id:"__init__"},"_","_","init","_","_"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(comp_id: UnitID)\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"comp_id")," - The component id (required to decide whether we match a given direct target).")),(0,a.kt)("h4",{id:"verify_message"},"verify","_","message"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def verify_message(msg: Message, msg_meta: MessageMetaInformation) -> None\n")),(0,a.kt)("p",null,"Verifies whether a message may enter the message bus."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"msg")," - The message that wants to enter the network engine."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"msg_meta")," - The message meta information.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Raises"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"RoutingError")," - In case the message is not valid to enter the network engine.")),(0,a.kt)("h4",{id:"check_local_routing"},"check","_","local","_","routing"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def check_local_routing(msg: Message,\n                        msg_meta: MessageMetaInformation) -> bool\n")),(0,a.kt)("p",null,"Checks if the message should be routed locally."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"msg")," - The message."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"msg_meta")," - The message meta information.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns"),":"),(0,a.kt)("p",null,"  Whether local routing should happen."),(0,a.kt)("h4",{id:"check_remote_routing"},"check","_","remote","_","routing"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def check_remote_routing(msg: Message,\n                         msg_meta: MessageMetaInformation) -> bool\n")),(0,a.kt)("p",null,"Checks if the message should be routed remotely."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"msg")," - The message."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"msg_meta")," - The message meta information.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns"),":"),(0,a.kt)("p",null,"  Whether remote routing should happen."))}g.isMDXComponent=!0}}]);