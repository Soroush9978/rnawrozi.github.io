"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6362],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>k});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var m=a.createContext({}),o=function(e){var t=a.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=o(e.components);return a.createElement(m.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,m=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=o(n),u=r,k=c["".concat(m,".").concat(u)]||c[u]||d[u]||l;return n?a.createElement(k,i(i({ref:t},p),{},{components:n})):a.createElement(k,i({ref:t},p))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=u;var s={};for(var m in t)hasOwnProperty.call(t,m)&&(s[m]=t[m]);s.originalType=e,s[c]="string"==typeof e?e:r,i[1]=s;for(var o=2;o<l;o++)i[o]=n[o];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8056:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>s,toc:()=>o});var a=n(7462),r=(n(7294),n(3905));const l={sidebar_label:"message_emitter",title:"core.messaging.handlers.message_emitter"},i=void 0,s={unversionedId:"reference/core/messaging/handlers/message_emitter",id:"reference/core/messaging/handlers/message_emitter",title:"core.messaging.handlers.message_emitter",description:"MessageEmitter Objects",source:"@site/docs/reference/core/messaging/handlers/message_emitter.md",sourceDirName:"reference/core/messaging/handlers",slug:"/reference/core/messaging/handlers/message_emitter",permalink:"/rnawrozi.github.io/docs/reference/core/messaging/handlers/message_emitter",draft:!1,tags:[],version:"current",frontMatter:{sidebar_label:"message_emitter",title:"core.messaging.handlers.message_emitter"},sidebar:"referenceSidebar",previous:{title:"message_context",permalink:"/rnawrozi.github.io/docs/reference/core/messaging/handlers/message_context"},next:{title:"message_handler",permalink:"/rnawrozi.github.io/docs/reference/core/messaging/handlers/message_handler"}},m={},o=[{value:"MessageEmitter Objects",id:"messageemitter-objects",level:2},{value:"__init__",id:"__init__",level:4},{value:"emit_command",id:"emit_command",level:4},{value:"emit_reply",id:"emit_reply",level:4},{value:"emit_event",id:"emit_event",level:4},{value:"get_message_count",id:"get_message_count",level:4}],p={toc:o},c="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"messageemitter-objects"},"MessageEmitter Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class MessageEmitter()\n")),(0,r.kt)("p",null,"A helper class to easily create and emit messages."),(0,r.kt)("p",null,"This class stores a reference to the global message bus and offers methods to easily create new messages and send them through the bus."),(0,r.kt)("h4",{id:"__init__"},"_","_","init","_","_"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(origin_id: UnitID, message_bus: MessageBusProtocol)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"origin_id")," - The component identifier of the origin of newly created messages."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"message_bus")," - The global message bus to use.")),(0,r.kt)("h4",{id:"emit_command"},"emit","_","command"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def emit_command(cmd_type: type[CommandType],\n                 target: Channel,\n                 done_callback: CommandDoneCallback | None = None,\n                 fail_callback: CommandFailCallback | None = None,\n                 async_callbacks: bool = False,\n                 timeout: float = 0.0,\n                 chain: Message | None = None,\n                 **kwargs) -> MessageType\n")),(0,r.kt)("p",null,"Emits a new command."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"cmd_type")," - The command type (i.e., a subclass of ",(0,r.kt)("inlineCode",{parentName:"li"},"Command"),")."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"target")," - The destination of the message."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"done_callback")," - Callback when a reply for the command was received."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"fail_callback")," - Callback when no reply for the command was received."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"async_callbacks")," - Whether to execute the callbacks asynchronously in their own thread."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"timeout")," - The timeout (in seconds) until a command is deemed ",(0,r.kt)("em",{parentName:"li"},"not answered"),". Pass ",(0,r.kt)("inlineCode",{parentName:"li"},"0")," to disable timeouts."),(0,r.kt)("li",{parentName:"ul"},"``0 - A message that acts as the ",(0,r.kt)("em",{parentName:"li"},"predecessor")," of the new message. Used to keep the same trace for multiple messages."),(0,r.kt)("li",{parentName:"ul"},"``1 - Additional parameters.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("p",null,"  The newly created command."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Raises"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"2 - "),"cmd_type",(0,r.kt)("inlineCode",{parentName:"li"},"is not a subclass of"),"Command``.")),(0,r.kt)("h4",{id:"emit_reply"},"emit","_","reply"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'def emit_reply(reply_type: type[CommandReplyType],\n               command: CommandType,\n               *,\n               success: bool = True,\n               message: str = "",\n               **kwargs) -> MessageType\n')),(0,r.kt)("p",null,"Emits a new command reply."),(0,r.kt)("p",null,"Most parameters, like the proper target, are extracted from the originating command."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"reply_type")," - The reply type (i.e., a subclass of ",(0,r.kt)("inlineCode",{parentName:"li"},"CommandReply"),")."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"command")," - The ",(0,r.kt)("inlineCode",{parentName:"li"},"Command")," this reply is based on."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"success")," - Whether the command ",(0,r.kt)("em",{parentName:"li"},"succeeded")," or not (how this is interpreted depends on the command)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"message")," - Additional message to include in the reply."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"**kwargs")," - Additional parameters.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("p",null,"  The newly created command reply."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Raises"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"RuntimeError")," - ",(0,r.kt)("inlineCode",{parentName:"li"},"reply_type")," is not a subclass of ",(0,r.kt)("inlineCode",{parentName:"li"},"CommandReply"),".")),(0,r.kt)("h4",{id:"emit_event"},"emit","_","event"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def emit_event(event_type: type[EventType],\n               target: Channel,\n               chain: Message | None = None,\n               **kwargs) -> MessageType\n")),(0,r.kt)("p",null,"Emits a new event."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"event_type")," - The event type (i.e., a subclass of ",(0,r.kt)("inlineCode",{parentName:"li"},"Event"),")."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"target")," - The destination of the message."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"chain")," - A message that acts as the ",(0,r.kt)("em",{parentName:"li"},"predecessor")," of the new message. Used to keep the same trace for multiple messages."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"**kwargs")," - Additional parameters.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("p",null,"  The newly created event."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Raises"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"RuntimeError")," - ",(0,r.kt)("inlineCode",{parentName:"li"},"event_type")," is not a subclass of ",(0,r.kt)("inlineCode",{parentName:"li"},"Event"),".")),(0,r.kt)("h4",{id:"get_message_count"},"get","_","message","_","count"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def get_message_count(msg_type: MessageType) -> int\n")),(0,r.kt)("p",null,"Gets how many messages of specific message types have beeen emitted."),(0,r.kt)("p",null,"The message emitter keeps track of how many messages of the three major types ",(0,r.kt)("inlineCode",{parentName:"p"},"Command"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"CommandReply")," and\n",(0,r.kt)("inlineCode",{parentName:"p"},"Event")," have been emitted."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"msg_type")," - The message type to get the count of. Must be either ",(0,r.kt)("inlineCode",{parentName:"li"},"Command"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"CommandReply")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"Event"),".")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("p",null,"  The number of messages already emitted of the specified type."))}d.isMDXComponent=!0}}]);