"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3659],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>f});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=r.createContext({}),u=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=u(e.components);return r.createElement(p.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),c=u(n),d=i,f=c["".concat(p,".").concat(d)]||c[d]||m[d]||a;return n?r.createElement(f,l(l({ref:t},s),{},{components:n})):r.createElement(f,l({ref:t},s))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,l=new Array(a);l[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[c]="string"==typeof e?e:i,l[1]=o;for(var u=2;u<a;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},973:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>a,metadata:()=>o,toc:()=>u});var r=n(7462),i=(n(7294),n(3905));const a={sidebar_label:"unit_id",title:"utils.unit_id"},l=void 0,o={unversionedId:"reference/utils/unit_id",id:"reference/utils/unit_id",title:"utils.unit_id",description:"UnitID Objects",source:"@site/docs/reference/utils/unit_id.md",sourceDirName:"reference/utils",slug:"/reference/utils/unit_id",permalink:"/rnawrozi.github.io/docs/reference/utils/unit_id",draft:!1,tags:[],version:"current",frontMatter:{sidebar_label:"unit_id",title:"utils.unit_id"},sidebar:"referenceSidebar",previous:{title:"random",permalink:"/rnawrozi.github.io/docs/reference/utils/random"}},p={},u=[{value:"UnitID Objects",id:"unitid-objects",level:2},{value:"equals",id:"equals",level:4},{value:"from_string",id:"from_string",level:4}],s={toc:u},c="wrapper";function m(e){let{components:t,...n}=e;return(0,i.kt)(c,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"unitid-objects"},"UnitID Objects"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"@dataclass(frozen=True)\nclass UnitID()\n")),(0,i.kt)("p",null,"A general unit identifier."),(0,i.kt)("p",null,"A ",(0,i.kt)("em",{parentName:"p"},"unit")," basically is something that has a unique identifier consisting of three parts: The general ",(0,i.kt)("inlineCode",{parentName:"p"},"type")," (e.g., ",(0,i.kt)("em",{parentName:"p"},"'","infra","'")," for components\nbelonging to the overall infrastructure), the ",(0,i.kt)("inlineCode",{parentName:"p"},"unit")," name itself (e.g., ",(0,i.kt)("em",{parentName:"p"},"'","gate","'")," or ",(0,i.kt)("em",{parentName:"p"},"'","server","'"),"), and an ",(0,i.kt)("inlineCode",{parentName:"p"},"instance")," specifier (used to\ndistinguish multiple instances of the same unit)."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Attributes"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"type")," - The unit type."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"unit")," - The unit name."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"instance")," - The instance specifier.")),(0,i.kt)("h4",{id:"equals"},"equals"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def equals(other: typing.Self) -> bool\n")),(0,i.kt)("p",null,"Compares this identifier to another one."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"other")," - The unit identifier to compare this one to.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Notes"),":"),(0,i.kt)("p",null,"  The ",(0,i.kt)("inlineCode",{parentName:"p"},"instance")," specifiers are only compared if both are not ",(0,i.kt)("inlineCode",{parentName:"p"},"None"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Returns"),":"),(0,i.kt)("p",null,"  Whether both identifiers are equal."),(0,i.kt)("h4",{id:"from_string"},"from","_","string"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"@staticmethod\ndef from_string(id_str: str) -> 'UnitID'\n")),(0,i.kt)("p",null,"Creates a new ",(0,i.kt)("inlineCode",{parentName:"p"},"UnitID")," from a string."),(0,i.kt)("p",null,"The string must be of the form ",(0,i.kt)("inlineCode",{parentName:"p"},"&lt;type&gt;/&lt;unit&gt;/&lt;instance&gt;")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"&lt;type&gt;/&lt;unit&gt;"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"id_str")," - The unit identifier string.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Returns"),":"),(0,i.kt)("p",null,"  The newly created ",(0,i.kt)("inlineCode",{parentName:"p"},"UnitID"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Raises"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ValueError")," - If the passed string is invalid.")))}m.isMDXComponent=!0}}]);