"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3789],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>d});var r=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,l=function(e,t){if(null==e)return{};var n,r,l={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var g=r.createContext({}),p=function(e){var t=r.useContext(g),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=p(e.components);return r.createElement(g.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,l=e.mdxType,a=e.originalType,g=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),c=p(n),m=l,d=c["".concat(g,".").concat(m)]||c[m]||u[m]||a;return n?r.createElement(d,o(o({ref:t},s),{},{components:n})):r.createElement(d,o({ref:t},s))}));function d(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var a=n.length,o=new Array(a);o[0]=m;var i={};for(var g in t)hasOwnProperty.call(t,g)&&(i[g]=t[g]);i.originalType=e,i[c]="string"==typeof e?e:l,o[1]=i;for(var p=2;p<a;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6699:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>g,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var r=n(7462),l=(n(7294),n(3905));const a={sidebar_label:"logger",title:"core.logging.logger"},o=void 0,i={unversionedId:"reference/core/logging/logger",id:"reference/core/logging/logger",title:"core.logging.logger",description:"Logger Objects",source:"@site/docs/reference/core/logging/logger.md",sourceDirName:"reference/core/logging",slug:"/reference/core/logging/logger",permalink:"/rnawrozi.github.io/docs/reference/core/logging/logger",draft:!1,tags:[],version:"current",frontMatter:{sidebar_label:"logger",title:"core.logging.logger"},sidebar:"referenceSidebar",previous:{title:"formatter",permalink:"/rnawrozi.github.io/docs/reference/core/logging/formatter"},next:{title:"logger_protocol",permalink:"/rnawrozi.github.io/docs/reference/core/logging/logger_protocol"}},g={},p=[{value:"Logger Objects",id:"logger-objects",level:2},{value:"__init__",id:"__init__",level:4},{value:"setLevel",id:"setlevel",level:4},{value:"debug",id:"debug",level:4},{value:"info",id:"info",level:4},{value:"warning",id:"warning",level:4},{value:"error",id:"error",level:4}],s={toc:p},c="wrapper";function u(e){let{components:t,...n}=e;return(0,l.kt)(c,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"logger-objects"},"Logger Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class Logger(logging.Logger)\n")),(0,l.kt)("p",null,"A customized logger offering advanced formatting and parameters listing."),(0,l.kt)("p",null,"This logger and its corresponding ",(0,l.kt)("inlineCode",{parentName:"p"},"Formatter")," display the log level, scope, as well as a parameters listing\nin a color-rich format for easy readability."),(0,l.kt)("h4",{id:"__init__"},"_","_","init","_","_"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(name: str, level: int = logging.INFO)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"name")," - The name of the logger."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"level")," - The maximum level for log entries to be displayed.")),(0,l.kt)("h4",{id:"setlevel"},"setLevel"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def setLevel(level: int) -> None\n")),(0,l.kt)("p",null,"Sets the logging level of this logger."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"level")," - The maximum level for entries to be logged.")),(0,l.kt)("h4",{id:"debug"},"debug"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def debug(msg: str, *, scope: str | None = None, **kwargs) -> None\n")),(0,l.kt)("p",null,"Logs a debugging message."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"msg")," - The text to log."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"scope")," - The scope of the entry."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"**kwargs")," - Any additional parameters.")),(0,l.kt)("h4",{id:"info"},"info"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def info(msg: str, *, scope: str | None = None, **kwargs) -> None\n")),(0,l.kt)("p",null,"Logs an information message."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"msg")," - The text to log."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"scope")," - The scope of the entry."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"**kwargs")," - Any additional parameters.")),(0,l.kt)("h4",{id:"warning"},"warning"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def warning(msg: str, *, scope: str | None = None, **kwargs) -> None\n")),(0,l.kt)("p",null,"Logs a warning message."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"msg")," - The text to log."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"scope")," - The scope of the entry."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"**kwargs")," - Any additional parameters.")),(0,l.kt)("h4",{id:"error"},"error"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def error(msg: str, *, scope: str | None = None, **kwargs) -> None\n")),(0,l.kt)("p",null,"Logs an error message."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"msg")," - The text to log."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"scope")," - The scope of the entry."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"**kwargs")," - Any additional parameters.")))}u.isMDXComponent=!0}}]);