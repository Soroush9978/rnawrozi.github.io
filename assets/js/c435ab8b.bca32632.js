"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[873],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),m=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=m(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=m(n),d=r,f=c["".concat(l,".").concat(d)]||c[d]||p[d]||i;return n?a.createElement(f,o(o({ref:t},u),{},{components:n})):a.createElement(f,o({ref:t},u))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:r,o[1]=s;for(var m=2;m<i;m++)o[m]=n[m];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6184:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>m});var a=n(7462),r=(n(7294),n(3905));const i={sidebar_label:"message_meta_information_list",title:"core.messaging.meta.message_meta_information_list"},o=void 0,s={unversionedId:"reference/core/messaging/meta/message_meta_information_list",id:"reference/core/messaging/meta/message_meta_information_list",title:"core.messaging.meta.message_meta_information_list",description:"MessageMetaInformationList Objects",source:"@site/docs/reference/core/messaging/meta/message_meta_information_list.md",sourceDirName:"reference/core/messaging/meta",slug:"/reference/core/messaging/meta/message_meta_information_list",permalink:"/rnawrozi.github.io/docs/reference/core/messaging/meta/message_meta_information_list",draft:!1,tags:[],version:"current",frontMatter:{sidebar_label:"message_meta_information_list",title:"core.messaging.meta.message_meta_information_list"},sidebar:"referenceSidebar",previous:{title:"message_meta_information",permalink:"/rnawrozi.github.io/docs/reference/core/messaging/meta/message_meta_information"},next:{title:"client",permalink:"/rnawrozi.github.io/docs/reference/core/messaging/networking/client"}},l={},m=[{value:"MessageMetaInformationList Objects",id:"messagemetainformationlist-objects",level:2},{value:"_Entry Objects",id:"_entry-objects",level:2},{value:"has_timed_out",id:"has_timed_out",level:4},{value:"add",id:"add",level:4},{value:"remove",id:"remove",level:4},{value:"find",id:"find",level:4},{value:"find_timed_out_entries",id:"find_timed_out_entries",level:4}],u={toc:m},c="wrapper";function p(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"messagemetainformationlist-objects"},"MessageMetaInformationList Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class MessageMetaInformationList()\n")),(0,r.kt)("p",null,"List to store message meta information objects."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Notes"),":"),(0,r.kt)("p",null,"  The list is thread-safe."),(0,r.kt)("h2",{id:"_entry-objects"},"_","Entry Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@dataclasses.dataclass(frozen=True)\nclass _Entry()\n")),(0,r.kt)("h4",{id:"has_timed_out"},"has","_","timed","_","out"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def has_timed_out() -> bool\n")),(0,r.kt)("p",null,"Whether the message has timed out."),(0,r.kt)("h4",{id:"add"},"add"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def add(unique: Trace, meta: MessageMetaInformation, timeout: float) -> None\n")),(0,r.kt)("p",null,"Adds a new entry to the list."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"unique")," - The unique trace identifying the message."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"meta")," - The message meta information."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"timeout")," - A timeout (in seconds) after which a message is deemed timed out.")),(0,r.kt)("h4",{id:"remove"},"remove"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def remove(unique: Trace) -> None\n")),(0,r.kt)("p",null,"Removes an entry from the list."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"unique")," - The unique trace identifying the message.")),(0,r.kt)("h4",{id:"find"},"find"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def find(unique: Trace) -> MessageMetaInformation | None\n")),(0,r.kt)("p",null,"Finds an entry associated with the given ",(0,r.kt)("inlineCode",{parentName:"p"},"unique"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"unique")," - The unique trace identifying the message.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("p",null,"  The found meta information, if any."),(0,r.kt)("h4",{id:"find_timed_out_entries"},"find","_","timed","_","out","_","entries"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def find_timed_out_entries() -> typing.List[Trace]\n")),(0,r.kt)("p",null,"Finds all entries that have timed out already."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("p",null,"  A list of all timed out entries."))}p.isMDXComponent=!0}}]);