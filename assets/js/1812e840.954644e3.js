"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9862],{3905:(e,r,t)=>{t.d(r,{Zo:()=>s,kt:()=>d});var n=t(7294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function l(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?l(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)t=l[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)t=l[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=n.createContext({}),g=function(e){var r=n.useContext(p),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},s=function(e){var r=g(e.components);return n.createElement(p.Provider,{value:r},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},c=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,l=e.originalType,p=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),m=g(t),c=a,d=m["".concat(p,".").concat(c)]||m[c]||u[c]||l;return t?n.createElement(d,o(o({ref:r},s),{},{components:t})):n.createElement(d,o({ref:r},s))}));function d(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var l=t.length,o=new Array(l);o[0]=c;var i={};for(var p in r)hasOwnProperty.call(r,p)&&(i[p]=r[p]);i.originalType=e,i[m]="string"==typeof e?e:a,o[1]=i;for(var g=2;g<l;g++)o[g]=t[g];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}c.displayName="MDXCreateElement"},8109:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>g});var n=t(7462),a=(t(7294),t(3905));const l={sidebar_label:"logger_proxy",title:"core.logging.logger_proxy"},o=void 0,i={unversionedId:"reference/core/logging/logger_proxy",id:"reference/core/logging/logger_proxy",title:"core.logging.logger_proxy",description:"LoggerProxy Objects",source:"@site/docs/reference/core/logging/logger_proxy.md",sourceDirName:"reference/core/logging",slug:"/reference/core/logging/logger_proxy",permalink:"/rnawrozi.github.io/docs/reference/core/logging/logger_proxy",draft:!1,tags:[],version:"current",frontMatter:{sidebar_label:"logger_proxy",title:"core.logging.logger_proxy"},sidebar:"referenceSidebar",previous:{title:"logger_protocol",permalink:"/rnawrozi.github.io/docs/reference/core/logging/logger_protocol"},next:{title:"channel",permalink:"/rnawrozi.github.io/docs/reference/core/messaging/channel"}},p={},g=[{value:"LoggerProxy Objects",id:"loggerproxy-objects",level:2},{value:"__init__",id:"__init__",level:4},{value:"add_param",id:"add_param",level:4},{value:"remove_param",id:"remove_param",level:4},{value:"clear_params",id:"clear_params",level:4},{value:"debug",id:"debug",level:4},{value:"info",id:"info",level:4},{value:"warning",id:"warning",level:4},{value:"error",id:"error",level:4}],s={toc:g},m="wrapper";function u(e){let{components:r,...t}=e;return(0,a.kt)(m,(0,n.Z)({},s,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"loggerproxy-objects"},"LoggerProxy Objects"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class LoggerProxy()\n")),(0,a.kt)("p",null,"A proxy to automatically pass extra parameters to a logger."),(0,a.kt)("p",null,"This class allows us to store additional, fixed parameters passed to an existing logger, avoiding the need to use\na new logger instance. It offers the same public interface as an actual ",(0,a.kt)("inlineCode",{parentName:"p"},"Logger")," and can thus be used like a\n",(0,a.kt)("em",{parentName:"p"},"real")," logger."),(0,a.kt)("h4",{id:"__init__"},"_","_","init","_","_"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(logger: Logger)\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"logger")," - The logger to use.")),(0,a.kt)("h4",{id:"add_param"},"add","_","param"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def add_param(name: str, value: typing.Any) -> None\n")),(0,a.kt)("p",null,"Adds a new paramter that is always automatically passed to the logger."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"name")," - The name of the parameter."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"value")," - Its value.")),(0,a.kt)("h4",{id:"remove_param"},"remove","_","param"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def remove_param(name: str) -> None\n")),(0,a.kt)("p",null,"Removes a parameter that has been added previously."),(0,a.kt)("h4",{id:"clear_params"},"clear","_","params"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def clear_params() -> None\n")),(0,a.kt)("p",null,"Removes all stored parameters."),(0,a.kt)("h4",{id:"debug"},"debug"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def debug(msg: str, *, scope: str | None = None, **kwargs) -> None\n")),(0,a.kt)("p",null,"Logs a debugging message."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"msg")," - The text to log."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"scope")," - The scope of the entry."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"**kwargs")," - Any additional parameters.")),(0,a.kt)("h4",{id:"info"},"info"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def info(msg: str, *, scope: str | None = None, **kwargs) -> None\n")),(0,a.kt)("p",null,"Logs an information message."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"msg")," - The text to log."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"scope")," - The scope of the entry."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"**kwargs")," - Any additional parameters.")),(0,a.kt)("h4",{id:"warning"},"warning"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def warning(msg: str, *, scope: str | None = None, **kwargs) -> None\n")),(0,a.kt)("p",null,"Logs a warning message."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"msg")," - The text to log."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"scope")," - The scope of the entry."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"**kwargs")," - Any additional parameters.")),(0,a.kt)("h4",{id:"error"},"error"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def error(msg: str, *, scope: str | None = None, **kwargs) -> None\n")),(0,a.kt)("p",null,"Logs an error message."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"msg")," - The text to log."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"scope")," - The scope of the entry."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"**kwargs")," - Any additional parameters.")))}u.isMDXComponent=!0}}]);