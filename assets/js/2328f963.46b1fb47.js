"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8254],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=c(n),u=r,h=m["".concat(s,".").concat(u)]||m[u]||d[u]||i;return n?a.createElement(h,l(l({ref:t},p),{},{components:n})):a.createElement(h,l({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[m]="string"==typeof e?e:r,l[1]=o;for(var c=2;c<i;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4636:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const i={sidebar_label:"command_dispatcher",title:"core.messaging.dispatchers.command_dispatcher"},l=void 0,o={unversionedId:"reference/core/messaging/dispatchers/command_dispatcher",id:"reference/core/messaging/dispatchers/command_dispatcher",title:"core.messaging.dispatchers.command_dispatcher",description:"CommandDispatcher Objects",source:"@site/docs/reference/core/messaging/dispatchers/command_dispatcher.md",sourceDirName:"reference/core/messaging/dispatchers",slug:"/reference/core/messaging/dispatchers/command_dispatcher",permalink:"/rnawrozi.github.io/docs/reference/core/messaging/dispatchers/command_dispatcher",draft:!1,tags:[],version:"current",frontMatter:{sidebar_label:"command_dispatcher",title:"core.messaging.dispatchers.command_dispatcher"},sidebar:"referenceSidebar",previous:{title:"command_reply",permalink:"/rnawrozi.github.io/docs/reference/core/messaging/command_reply"},next:{title:"command_reply_dispatcher",permalink:"/rnawrozi.github.io/docs/reference/core/messaging/dispatchers/command_reply_dispatcher"}},s={},c=[{value:"CommandDispatcher Objects",id:"commanddispatcher-objects",level:2},{value:"process",id:"process",level:4},{value:"pre_dispatch",id:"pre_dispatch",level:4},{value:"dispatch",id:"dispatch",level:4},{value:"invoke_reply_callback",id:"invoke_reply_callback",level:4}],p={toc:c},m="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"commanddispatcher-objects"},"CommandDispatcher Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class CommandDispatcher(MessageDispatcher[Command])\n")),(0,r.kt)("p",null,"Message dispatcher specific to ",(0,r.kt)("inlineCode",{parentName:"p"},"Command"),"."),(0,r.kt)("h4",{id:"process"},"process"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def process() -> None\n")),(0,r.kt)("p",null,"Takes care of checking whether issued commands have already timed out."),(0,r.kt)("h4",{id:"pre_dispatch"},"pre","_","dispatch"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def pre_dispatch(msg: Command, msg_meta: CommandMetaInformation) -> None\n")),(0,r.kt)("p",null,"Adds command meta information to a global list so that command replies can be handled properly."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"msg")," - The command that is about to be dispatched."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"msg_meta")," - The command meta information.")),(0,r.kt)("h4",{id:"dispatch"},"dispatch"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def dispatch(msg: Command, msg_meta: CommandMetaInformation,\n             handler: MessageHandlerMapping, ctx: MessageContextType) -> None\n")),(0,r.kt)("p",null,"Dispatches a message to locally registered message handlers."),(0,r.kt)("p",null,"Handlers can be either called synchronously or asynchronously, depending on how the handler was registered."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Notes"),":"),(0,r.kt)("p",null,"  Exceptions arising within a message handler will not interrupt the running program; instead, such errors will only be logged."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"msg")," - The message to be dispatched."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"msg_meta")," - The message meta information."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"handler")," - The handler to be invoked."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ctx")," - The message context.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Raises"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"RuntimeError")," - If the handler requires a different message type.")),(0,r.kt)("h4",{id:"invoke_reply_callback"},"invoke","_","reply","_","callback"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'@staticmethod\ndef invoke_reply_callback(\n        unique: Trace,\n        *,\n        reply: CommandReply | None = None,\n        fail_type: CommandReply.FailType = CommandReply.FailType.NONE,\n        fail_msg: str = "") -> None\n')),(0,r.kt)("p",null,"Invokes command reply handlers."),(0,r.kt)("p",null,"When emitting a command, it is possible to specify reply callbacks that are invoked beside message handlers. This method will call the correct callback\nand take care of intercepting exceptions."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"unique")," - The unique trace of the command."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"reply")," - The received command reply (if any)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"fail_type")," - The type of the command failure (in case of a timeout or exception)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"fail_msg")," - The failure message.")))}d.isMDXComponent=!0}}]);