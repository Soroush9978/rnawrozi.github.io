"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3026],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),c=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(o.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,o=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(n),d=a,g=m["".concat(o,".").concat(d)]||m[d]||u[d]||s;return n?r.createElement(g,i(i({ref:t},p),{},{components:n})):r.createElement(g,i({ref:t},p))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,i=new Array(s);i[0]=d;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[m]="string"==typeof e?e:a,i[1]=l;for(var c=2;c<s;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9562:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const s={sidebar_label:"service",title:"service.service"},i=void 0,l={unversionedId:"reference/service/service",id:"reference/service/service",title:"service.service",description:"Service Objects",source:"@site/docs/reference/service/service.md",sourceDirName:"reference/service",slug:"/reference/service/",permalink:"/rnawrozi.github.io/docs/reference/service/",draft:!1,tags:[],version:"current",frontMatter:{sidebar_label:"service",title:"service.service"},sidebar:"referenceSidebar",previous:{title:"server",permalink:"/rnawrozi.github.io/docs/reference/core/messaging/networking/server"},next:{title:"service_context",permalink:"/rnawrozi.github.io/docs/reference/service/service_context"}},o={},c=[{value:"Service Objects",id:"service-objects",level:2},{value:"__init__",id:"__init__",level:4},{value:"message_handler",id:"message_handler",level:4},{value:"name",id:"name",level:4},{value:"message_emitter",id:"message_emitter",level:4}],p={toc:c},m="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"service-objects"},"Service Objects"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"@typing.final\nclass Service(MessageService)\n")),(0,a.kt)("p",null,"Base service class providing easy message handler mapping."),(0,a.kt)("p",null,"A service can be seen as the bridge between the inner workings of a component (represented by a ",(0,a.kt)("inlineCode",{parentName:"p"},"Core"),") and the\noutside component domain."),(0,a.kt)("p",null,"Services register the various message handlers that are called when a certain message is received by the message bus and\ndispatched locally. They also create instances of ",(0,a.kt)("inlineCode",{parentName:"p"},"ServiceContext")," (or a subclass) that represent a single ",(0,a.kt)("em",{parentName:"p"},"unit of work"),"\nwhen executing a message handler."),(0,a.kt)("p",null,"Message handlers are defined using the ",(0,a.kt)("inlineCode",{parentName:"p"},"message_handler")," decorator, as can be seen in this example (",(0,a.kt)("inlineCode",{parentName:"p"},"svc")," being a ",(0,a.kt)("inlineCode",{parentName:"p"},"Service")," instance)::"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"@svc.message_handler(&quot;msg/event&quot;, Event)\ndef h(msg: Event, ctx: ServiceContext) -&gt; None:\n    ctx.logger.info(f&quot;EVENT HANDLER CALLED&quot;)\n")),(0,a.kt)("h4",{id:"__init__"},"_","_","init","_","_"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(comp_id: UnitID,\n             name: str,\n             *,\n             message_bus: MessageBusProtocol,\n             context_type: type[ServiceContextType] = ServiceContext)\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"comp_id")," - The global component identifier."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"name")," - The service name."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"message_bus")," - The global message bus."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"context_type")," - The type to use when creating a service context.")),(0,a.kt)("h4",{id:"message_handler"},"message","_","handler"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def message_handler(\n    fltr: str,\n    message_type: type[MessageType] = Message,\n    *,\n    is_async: bool = False\n) -> typing.Callable[[MessageHandler], MessageHandler]\n")),(0,a.kt)("p",null,"A decorator to declare a message handler."),(0,a.kt)("p",null,"To define a new message handler, use the following pattern::"),(0,a.kt)("p",null,"@svc.message_handler(",'"',"msg/event",'"',", Event)\ndef h(msg: Event, ctx: ServiceContext) -",">"," None:\nctx.logger.info(f",'"',"EVENT HANDLER CALLED",'"',")"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"fltr")," - The message name filter to match against; wildcards (*) are supported for more generic handlers."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"message_type")," - The type of the message."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"is_async")," - Whether to execute the handler asynchronously in its own thread.")),(0,a.kt)("h4",{id:"name"},"name"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef name() -> str\n")),(0,a.kt)("p",null,"The name of this service."),(0,a.kt)("h4",{id:"message_emitter"},"message","_","emitter"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef message_emitter() -> MessageEmitter\n")),(0,a.kt)("p",null,"The service","'","s message emitter."))}u.isMDXComponent=!0}}]);